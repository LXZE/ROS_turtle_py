#!/usr/bin/env python

# Author : Chayapol Piyaphakdeesakun

import rospy
from sensor_msgs.msg import LaserScan, BatteryState
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry

valueLaserRaw = {
	'range_min':0.0,
	'range_max':0.0,
	'ranges':[0.0]*360,
	}
valueBatteryState = None
valueOdometry = {
	'position':None,	#Datatype: geometry_msg/Point	(x,y,z)
	'orientation':None,	#Datatype: geometry_msg/Quaternion	(x,y,z,w)
	'linearVelocity':None,	#Datatype: geometry_msg/Vector3	(x,y,z)
	'angularVelocity':None,	#Datatype: geometry_msg/Vector3	(x,y,z)
	}
cmd_vel_publisher = None
subscribers = []

def initRosNode():
	global cmd_vel_publisher
	global subscribers
	rospy.init_node('turtlebot3Controller',anonymous=True)
	rospy.on_shutdown(terminateRosNode)
	cmd_vel_publisher = rospy.Publisher('cmd_vel',Twist,queue_size=1)
	subscribers.append(rospy.Subscriber('scan',LaserScan,callback=scanSubscriberCallback))
	subscribers.append(rospy.Subscriber('battery_state',BatteryState,callback=batteryStateSubscriberCallback))
	subscribers.append(rospy.Subscriber('odom',Odometry,callback=odomSubscriberCallback))

def publishVelocityCommand(linearVelocity,angularVelocity):
	global cmd_vel_publisher
	twist = Twist()
	twist.linear.x = linearVelocity
	twist.angular.z = angularVelocity
	cmd_vel_publisher.publish(twist)

def sendOdometryReset():
	raise NotImplementedError()

def scanSubscriberCallback(message):
	#message's datatype: sensor_msg/LaserScan
	global valueLaserRaw
	
	##TODO: process the received values to remove obviously error values
	rawLaser = {
		'range_min':message.range_min,
		'range_max':message.range_max,
		'ranges':list(message.ranges),
		}
	valueLaserRaw = rawLaser

def batteryStateSubscriberCallback(message):
	#message's datatype: sensor_msgs/BatteryState
	global valueBatteryState
	valueBatteryState = message

def odomSubscriberCallback(message):
	#message's datatype: nav_msgs/Odometry.msg
	global valueOdometry
	valueOdometry = {
		'position':message.pose.pose.position,
		'orientation':message.pose.pose.orientation,
		'linearVelocity':message.twist.twist.linear,
		'angularVelocity':message.twist.twist.angular,
		}

def terminateRosNode():
	twist = Twist()
	twist.linear.x = 0.0
	twist.angular.z = 0.0
	pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
	pub.publish(twist)
	pub.unregister()
	global subscribers
	for sub in subscribers:
		sub.unregister()

def main():
	global valueLaserRaw
	global valueBatteryState
	global valueOdometry
	initRosNode()
	try:
		rate = rospy.Rate(10) #Control the rate of command send in unit of Hz
		while valueBatteryState ==None:
			pass
		batteryState = valueBatteryState	#copy sensor value before use
		print('BatteryVoltage: {}'.format(batteryState.voltage))
		##TODO: Write your robot control program here (run once)

		while not rospy.is_shutdown():
			try:
				rate.sleep()	#pause the program to maintain command rate
				##TODO: Write your robot control program here (run repeatly)
				publishVelocityCommand(0.00,0.05)
				print(valueOdometry)
			except KeyboardInterrupt:
				terminateRosNode()
	except rospy.ROSInterruptException:
		pass
if __name__ == '__main__':
	main()
